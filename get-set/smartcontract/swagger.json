{
	"swagger": "2.0",
	"info": {},
	"host": "localhost:3002",
	"basePath": "/api/v1",
	"paths": {
		"/invoke/set": {
			"post": {
				"tags": [
					"set"
				],
				"summary": "Set the value of a key",
				"description": "",
				"operationId": "set",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "args",
						"description": "Argument(s) to pass to the blockchain Smart Contract app function, such as blockchain transaction payload. Argument(s) will be passed as argument(s) to Smart Contract function.",
						"required": "true",
						"schema": {
							"$ref": "#/definitions/SetKeyParams"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success. Processing complete."
					},
					"202": {
						"description": "Success. Queued for processing."
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal server error"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/query/get": {
			"post": {
				"tags": [
					"get"
				],
				"summary": "Get the value of a key",
				"description": "",
				"operationId": "get",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "args",
						"description": "Argument(s) to pass to the blockchain Smart Contract app function, argument(s) will be passed as argument(s) to Smart Contract function.",
						"required": "true",
						"schema": {
							"$ref": "#/definitions/GetParams"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success. Processing complete."
					},
					"202": {
						"description": "Success. Queued for processing."
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"500": {
						"description": "Internal server error"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		}
	},
	"securityDefinitions": {
		"Bearer": {
			"name": "Authorization",
			"in": "header",
			"type": "apiKey"
		}
	},
	"definitions": {
		"SetKeyParams": {
			"type": "string",
			"example": "[\"a\",\"123\"]"
		},
		"GetParams": {
			"type": "string",
			"example": "[\"a\"]"
		}
	}
}